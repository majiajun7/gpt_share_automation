"""Add known_devices_snapshot to LoginSession

Revision ID: 4dec4af8187e
Revises: d085f33ad789
Create Date: 2025-04-23 16:19:39.705832

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '4dec4af8187e'
down_revision = 'd085f33ad789'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.add_column('login_session', sa.Column('known_devices', sa.Text(), nullable=True))
    op.add_column('login_session', sa.Column('known_devices_snapshot', sa.Text(), nullable=True))
    op.add_column('login_session', sa.Column('expiration_timestamp', sa.DateTime(), nullable=True))
    op.add_column('login_session', sa.Column('status', sa.String(length=20), nullable=True, server_default='pending'))
    
    # 尝试应用 login_token 的修改和索引创建 (如果这些之前也失败了，可能也需要注释掉)
    try:
        with op.batch_alter_table('login_session', schema=None) as batch_op:
            batch_op.alter_column('login_token',
                   existing_type=sa.VARCHAR(length=128),
                   nullable=False)
            # SQLite 不直接支持 ALTER COLUMN 来添加 UNIQUE constraint，通常需要重建表
            # 但 create_index 应该能处理 unique=True
            batch_op.create_index(batch_op.f('ix_login_session_login_token'), ['login_token'], unique=True)
    except Exception as e:
        # 如果 alter_column 或 create_index 也报错（例如已存在），则忽略
        print(f"Ignoring error during login_token alter/index creation, likely already applied: {e}")
        pass # 忽略错误，继续执行

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        with op.batch_alter_table('login_session', schema=None) as batch_op:
            batch_op.drop_index(batch_op.f('ix_login_session_login_token'))
            batch_op.alter_column('login_token',
                   existing_type=sa.VARCHAR(length=128),
                   nullable=True)
    except Exception as e:
         print(f"Ignoring error during login_token drop index/alter, likely not present: {e}")
         pass

    # op.drop_column('login_session', 'known_devices')
    op.drop_column('login_session', 'known_devices_snapshot')
    op.drop_column('login_session', 'status')
    op.drop_column('login_session', 'expiration_timestamp')
    # ### end Alembic commands ###
